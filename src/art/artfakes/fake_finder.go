// Code generated by counterfeiter. DO NOT EDIT.
package artfakes

import (
	"context"
	"sync"

	"github.com/ironsmile/euterpe/src/art"
)

type FakeFinder struct {
	GetArtistImageStub        func(context.Context, string) ([]byte, error)
	getArtistImageMutex       sync.RWMutex
	getArtistImageArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getArtistImageReturns struct {
		result1 []byte
		result2 error
	}
	getArtistImageReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetFrontImageStub        func(context.Context, string, string) ([]byte, error)
	getFrontImageMutex       sync.RWMutex
	getFrontImageArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getFrontImageReturns struct {
		result1 []byte
		result2 error
	}
	getFrontImageReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinder) GetArtistImage(arg1 context.Context, arg2 string) ([]byte, error) {
	fake.getArtistImageMutex.Lock()
	ret, specificReturn := fake.getArtistImageReturnsOnCall[len(fake.getArtistImageArgsForCall)]
	fake.getArtistImageArgsForCall = append(fake.getArtistImageArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetArtistImageStub
	fakeReturns := fake.getArtistImageReturns
	fake.recordInvocation("GetArtistImage", []interface{}{arg1, arg2})
	fake.getArtistImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFinder) GetArtistImageCallCount() int {
	fake.getArtistImageMutex.RLock()
	defer fake.getArtistImageMutex.RUnlock()
	return len(fake.getArtistImageArgsForCall)
}

func (fake *FakeFinder) GetArtistImageCalls(stub func(context.Context, string) ([]byte, error)) {
	fake.getArtistImageMutex.Lock()
	defer fake.getArtistImageMutex.Unlock()
	fake.GetArtistImageStub = stub
}

func (fake *FakeFinder) GetArtistImageArgsForCall(i int) (context.Context, string) {
	fake.getArtistImageMutex.RLock()
	defer fake.getArtistImageMutex.RUnlock()
	argsForCall := fake.getArtistImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFinder) GetArtistImageReturns(result1 []byte, result2 error) {
	fake.getArtistImageMutex.Lock()
	defer fake.getArtistImageMutex.Unlock()
	fake.GetArtistImageStub = nil
	fake.getArtistImageReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) GetArtistImageReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getArtistImageMutex.Lock()
	defer fake.getArtistImageMutex.Unlock()
	fake.GetArtistImageStub = nil
	if fake.getArtistImageReturnsOnCall == nil {
		fake.getArtistImageReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getArtistImageReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) GetFrontImage(arg1 context.Context, arg2 string, arg3 string) ([]byte, error) {
	fake.getFrontImageMutex.Lock()
	ret, specificReturn := fake.getFrontImageReturnsOnCall[len(fake.getFrontImageArgsForCall)]
	fake.getFrontImageArgsForCall = append(fake.getFrontImageArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetFrontImageStub
	fakeReturns := fake.getFrontImageReturns
	fake.recordInvocation("GetFrontImage", []interface{}{arg1, arg2, arg3})
	fake.getFrontImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFinder) GetFrontImageCallCount() int {
	fake.getFrontImageMutex.RLock()
	defer fake.getFrontImageMutex.RUnlock()
	return len(fake.getFrontImageArgsForCall)
}

func (fake *FakeFinder) GetFrontImageCalls(stub func(context.Context, string, string) ([]byte, error)) {
	fake.getFrontImageMutex.Lock()
	defer fake.getFrontImageMutex.Unlock()
	fake.GetFrontImageStub = stub
}

func (fake *FakeFinder) GetFrontImageArgsForCall(i int) (context.Context, string, string) {
	fake.getFrontImageMutex.RLock()
	defer fake.getFrontImageMutex.RUnlock()
	argsForCall := fake.getFrontImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFinder) GetFrontImageReturns(result1 []byte, result2 error) {
	fake.getFrontImageMutex.Lock()
	defer fake.getFrontImageMutex.Unlock()
	fake.GetFrontImageStub = nil
	fake.getFrontImageReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) GetFrontImageReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getFrontImageMutex.Lock()
	defer fake.getFrontImageMutex.Unlock()
	fake.GetFrontImageStub = nil
	if fake.getFrontImageReturnsOnCall == nil {
		fake.getFrontImageReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getFrontImageReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getArtistImageMutex.RLock()
	defer fake.getArtistImageMutex.RUnlock()
	fake.getFrontImageMutex.RLock()
	defer fake.getFrontImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ art.Finder = new(FakeFinder)
