// Code generated by counterfeiter. DO NOT EDIT.
package artfakes

import (
	"sync"

	"github.com/ironsmile/euterpe/src/art"
	"github.com/pborman/uuid"
	caa "gopkg.in/mineo/gocaa.v1"
)

type FakeCAAClient struct {
	GetReleaseFrontStub        func(uuid.UUID, int) (caa.CoverArtImage, error)
	getReleaseFrontMutex       sync.RWMutex
	getReleaseFrontArgsForCall []struct {
		arg1 uuid.UUID
		arg2 int
	}
	getReleaseFrontReturns struct {
		result1 caa.CoverArtImage
		result2 error
	}
	getReleaseFrontReturnsOnCall map[int]struct {
		result1 caa.CoverArtImage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCAAClient) GetReleaseFront(arg1 uuid.UUID, arg2 int) (caa.CoverArtImage, error) {
	fake.getReleaseFrontMutex.Lock()
	ret, specificReturn := fake.getReleaseFrontReturnsOnCall[len(fake.getReleaseFrontArgsForCall)]
	fake.getReleaseFrontArgsForCall = append(fake.getReleaseFrontArgsForCall, struct {
		arg1 uuid.UUID
		arg2 int
	}{arg1, arg2})
	stub := fake.GetReleaseFrontStub
	fakeReturns := fake.getReleaseFrontReturns
	fake.recordInvocation("GetReleaseFront", []interface{}{arg1, arg2})
	fake.getReleaseFrontMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCAAClient) GetReleaseFrontCallCount() int {
	fake.getReleaseFrontMutex.RLock()
	defer fake.getReleaseFrontMutex.RUnlock()
	return len(fake.getReleaseFrontArgsForCall)
}

func (fake *FakeCAAClient) GetReleaseFrontCalls(stub func(uuid.UUID, int) (caa.CoverArtImage, error)) {
	fake.getReleaseFrontMutex.Lock()
	defer fake.getReleaseFrontMutex.Unlock()
	fake.GetReleaseFrontStub = stub
}

func (fake *FakeCAAClient) GetReleaseFrontArgsForCall(i int) (uuid.UUID, int) {
	fake.getReleaseFrontMutex.RLock()
	defer fake.getReleaseFrontMutex.RUnlock()
	argsForCall := fake.getReleaseFrontArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCAAClient) GetReleaseFrontReturns(result1 caa.CoverArtImage, result2 error) {
	fake.getReleaseFrontMutex.Lock()
	defer fake.getReleaseFrontMutex.Unlock()
	fake.GetReleaseFrontStub = nil
	fake.getReleaseFrontReturns = struct {
		result1 caa.CoverArtImage
		result2 error
	}{result1, result2}
}

func (fake *FakeCAAClient) GetReleaseFrontReturnsOnCall(i int, result1 caa.CoverArtImage, result2 error) {
	fake.getReleaseFrontMutex.Lock()
	defer fake.getReleaseFrontMutex.Unlock()
	fake.GetReleaseFrontStub = nil
	if fake.getReleaseFrontReturnsOnCall == nil {
		fake.getReleaseFrontReturnsOnCall = make(map[int]struct {
			result1 caa.CoverArtImage
			result2 error
		})
	}
	fake.getReleaseFrontReturnsOnCall[i] = struct {
		result1 caa.CoverArtImage
		result2 error
	}{result1, result2}
}

func (fake *FakeCAAClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getReleaseFrontMutex.RLock()
	defer fake.getReleaseFrontMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCAAClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ art.CAAClient = new(FakeCAAClient)
