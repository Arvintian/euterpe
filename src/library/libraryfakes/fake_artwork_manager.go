// Code generated by counterfeiter. DO NOT EDIT.
package libraryfakes

import (
	"context"
	"io"
	"sync"

	"github.com/ironsmile/euterpe/src/library"
)

type FakeArtworkManager struct {
	FindAndSaveAlbumArtworkStub        func(context.Context, int64, library.ImageSize) (io.ReadCloser, error)
	findAndSaveAlbumArtworkMutex       sync.RWMutex
	findAndSaveAlbumArtworkArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 library.ImageSize
	}
	findAndSaveAlbumArtworkReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	findAndSaveAlbumArtworkReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	RemoveAlbumArtworkStub        func(context.Context, int64) error
	removeAlbumArtworkMutex       sync.RWMutex
	removeAlbumArtworkArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	removeAlbumArtworkReturns struct {
		result1 error
	}
	removeAlbumArtworkReturnsOnCall map[int]struct {
		result1 error
	}
	SaveAlbumArtworkStub        func(context.Context, int64, io.Reader) error
	saveAlbumArtworkMutex       sync.RWMutex
	saveAlbumArtworkArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 io.Reader
	}
	saveAlbumArtworkReturns struct {
		result1 error
	}
	saveAlbumArtworkReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtworkManager) FindAndSaveAlbumArtwork(arg1 context.Context, arg2 int64, arg3 library.ImageSize) (io.ReadCloser, error) {
	fake.findAndSaveAlbumArtworkMutex.Lock()
	ret, specificReturn := fake.findAndSaveAlbumArtworkReturnsOnCall[len(fake.findAndSaveAlbumArtworkArgsForCall)]
	fake.findAndSaveAlbumArtworkArgsForCall = append(fake.findAndSaveAlbumArtworkArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 library.ImageSize
	}{arg1, arg2, arg3})
	stub := fake.FindAndSaveAlbumArtworkStub
	fakeReturns := fake.findAndSaveAlbumArtworkReturns
	fake.recordInvocation("FindAndSaveAlbumArtwork", []interface{}{arg1, arg2, arg3})
	fake.findAndSaveAlbumArtworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArtworkManager) FindAndSaveAlbumArtworkCallCount() int {
	fake.findAndSaveAlbumArtworkMutex.RLock()
	defer fake.findAndSaveAlbumArtworkMutex.RUnlock()
	return len(fake.findAndSaveAlbumArtworkArgsForCall)
}

func (fake *FakeArtworkManager) FindAndSaveAlbumArtworkCalls(stub func(context.Context, int64, library.ImageSize) (io.ReadCloser, error)) {
	fake.findAndSaveAlbumArtworkMutex.Lock()
	defer fake.findAndSaveAlbumArtworkMutex.Unlock()
	fake.FindAndSaveAlbumArtworkStub = stub
}

func (fake *FakeArtworkManager) FindAndSaveAlbumArtworkArgsForCall(i int) (context.Context, int64, library.ImageSize) {
	fake.findAndSaveAlbumArtworkMutex.RLock()
	defer fake.findAndSaveAlbumArtworkMutex.RUnlock()
	argsForCall := fake.findAndSaveAlbumArtworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeArtworkManager) FindAndSaveAlbumArtworkReturns(result1 io.ReadCloser, result2 error) {
	fake.findAndSaveAlbumArtworkMutex.Lock()
	defer fake.findAndSaveAlbumArtworkMutex.Unlock()
	fake.FindAndSaveAlbumArtworkStub = nil
	fake.findAndSaveAlbumArtworkReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeArtworkManager) FindAndSaveAlbumArtworkReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.findAndSaveAlbumArtworkMutex.Lock()
	defer fake.findAndSaveAlbumArtworkMutex.Unlock()
	fake.FindAndSaveAlbumArtworkStub = nil
	if fake.findAndSaveAlbumArtworkReturnsOnCall == nil {
		fake.findAndSaveAlbumArtworkReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.findAndSaveAlbumArtworkReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeArtworkManager) RemoveAlbumArtwork(arg1 context.Context, arg2 int64) error {
	fake.removeAlbumArtworkMutex.Lock()
	ret, specificReturn := fake.removeAlbumArtworkReturnsOnCall[len(fake.removeAlbumArtworkArgsForCall)]
	fake.removeAlbumArtworkArgsForCall = append(fake.removeAlbumArtworkArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.RemoveAlbumArtworkStub
	fakeReturns := fake.removeAlbumArtworkReturns
	fake.recordInvocation("RemoveAlbumArtwork", []interface{}{arg1, arg2})
	fake.removeAlbumArtworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArtworkManager) RemoveAlbumArtworkCallCount() int {
	fake.removeAlbumArtworkMutex.RLock()
	defer fake.removeAlbumArtworkMutex.RUnlock()
	return len(fake.removeAlbumArtworkArgsForCall)
}

func (fake *FakeArtworkManager) RemoveAlbumArtworkCalls(stub func(context.Context, int64) error) {
	fake.removeAlbumArtworkMutex.Lock()
	defer fake.removeAlbumArtworkMutex.Unlock()
	fake.RemoveAlbumArtworkStub = stub
}

func (fake *FakeArtworkManager) RemoveAlbumArtworkArgsForCall(i int) (context.Context, int64) {
	fake.removeAlbumArtworkMutex.RLock()
	defer fake.removeAlbumArtworkMutex.RUnlock()
	argsForCall := fake.removeAlbumArtworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeArtworkManager) RemoveAlbumArtworkReturns(result1 error) {
	fake.removeAlbumArtworkMutex.Lock()
	defer fake.removeAlbumArtworkMutex.Unlock()
	fake.RemoveAlbumArtworkStub = nil
	fake.removeAlbumArtworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtworkManager) RemoveAlbumArtworkReturnsOnCall(i int, result1 error) {
	fake.removeAlbumArtworkMutex.Lock()
	defer fake.removeAlbumArtworkMutex.Unlock()
	fake.RemoveAlbumArtworkStub = nil
	if fake.removeAlbumArtworkReturnsOnCall == nil {
		fake.removeAlbumArtworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeAlbumArtworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtworkManager) SaveAlbumArtwork(arg1 context.Context, arg2 int64, arg3 io.Reader) error {
	fake.saveAlbumArtworkMutex.Lock()
	ret, specificReturn := fake.saveAlbumArtworkReturnsOnCall[len(fake.saveAlbumArtworkArgsForCall)]
	fake.saveAlbumArtworkArgsForCall = append(fake.saveAlbumArtworkArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 io.Reader
	}{arg1, arg2, arg3})
	stub := fake.SaveAlbumArtworkStub
	fakeReturns := fake.saveAlbumArtworkReturns
	fake.recordInvocation("SaveAlbumArtwork", []interface{}{arg1, arg2, arg3})
	fake.saveAlbumArtworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArtworkManager) SaveAlbumArtworkCallCount() int {
	fake.saveAlbumArtworkMutex.RLock()
	defer fake.saveAlbumArtworkMutex.RUnlock()
	return len(fake.saveAlbumArtworkArgsForCall)
}

func (fake *FakeArtworkManager) SaveAlbumArtworkCalls(stub func(context.Context, int64, io.Reader) error) {
	fake.saveAlbumArtworkMutex.Lock()
	defer fake.saveAlbumArtworkMutex.Unlock()
	fake.SaveAlbumArtworkStub = stub
}

func (fake *FakeArtworkManager) SaveAlbumArtworkArgsForCall(i int) (context.Context, int64, io.Reader) {
	fake.saveAlbumArtworkMutex.RLock()
	defer fake.saveAlbumArtworkMutex.RUnlock()
	argsForCall := fake.saveAlbumArtworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeArtworkManager) SaveAlbumArtworkReturns(result1 error) {
	fake.saveAlbumArtworkMutex.Lock()
	defer fake.saveAlbumArtworkMutex.Unlock()
	fake.SaveAlbumArtworkStub = nil
	fake.saveAlbumArtworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtworkManager) SaveAlbumArtworkReturnsOnCall(i int, result1 error) {
	fake.saveAlbumArtworkMutex.Lock()
	defer fake.saveAlbumArtworkMutex.Unlock()
	fake.SaveAlbumArtworkStub = nil
	if fake.saveAlbumArtworkReturnsOnCall == nil {
		fake.saveAlbumArtworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveAlbumArtworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtworkManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findAndSaveAlbumArtworkMutex.RLock()
	defer fake.findAndSaveAlbumArtworkMutex.RUnlock()
	fake.removeAlbumArtworkMutex.RLock()
	defer fake.removeAlbumArtworkMutex.RUnlock()
	fake.saveAlbumArtworkMutex.RLock()
	defer fake.saveAlbumArtworkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArtworkManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ library.ArtworkManager = new(FakeArtworkManager)
