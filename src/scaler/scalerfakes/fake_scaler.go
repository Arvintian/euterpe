// Code generated by counterfeiter. DO NOT EDIT.
package scalerfakes

import (
	"context"
	"io"
	"sync"

	"github.com/ironsmile/euterpe/src/scaler"
)

type FakeScaler struct {
	CancelStub        func()
	cancelMutex       sync.RWMutex
	cancelArgsForCall []struct {
	}
	ScaleStub        func(context.Context, io.Reader, int) ([]byte, error)
	scaleMutex       sync.RWMutex
	scaleArgsForCall []struct {
		arg1 context.Context
		arg2 io.Reader
		arg3 int
	}
	scaleReturns struct {
		result1 []byte
		result2 error
	}
	scaleReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScaler) Cancel() {
	fake.cancelMutex.Lock()
	fake.cancelArgsForCall = append(fake.cancelArgsForCall, struct {
	}{})
	stub := fake.CancelStub
	fake.recordInvocation("Cancel", []interface{}{})
	fake.cancelMutex.Unlock()
	if stub != nil {
		fake.CancelStub()
	}
}

func (fake *FakeScaler) CancelCallCount() int {
	fake.cancelMutex.RLock()
	defer fake.cancelMutex.RUnlock()
	return len(fake.cancelArgsForCall)
}

func (fake *FakeScaler) CancelCalls(stub func()) {
	fake.cancelMutex.Lock()
	defer fake.cancelMutex.Unlock()
	fake.CancelStub = stub
}

func (fake *FakeScaler) Scale(arg1 context.Context, arg2 io.Reader, arg3 int) ([]byte, error) {
	fake.scaleMutex.Lock()
	ret, specificReturn := fake.scaleReturnsOnCall[len(fake.scaleArgsForCall)]
	fake.scaleArgsForCall = append(fake.scaleArgsForCall, struct {
		arg1 context.Context
		arg2 io.Reader
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ScaleStub
	fakeReturns := fake.scaleReturns
	fake.recordInvocation("Scale", []interface{}{arg1, arg2, arg3})
	fake.scaleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeScaler) ScaleCallCount() int {
	fake.scaleMutex.RLock()
	defer fake.scaleMutex.RUnlock()
	return len(fake.scaleArgsForCall)
}

func (fake *FakeScaler) ScaleCalls(stub func(context.Context, io.Reader, int) ([]byte, error)) {
	fake.scaleMutex.Lock()
	defer fake.scaleMutex.Unlock()
	fake.ScaleStub = stub
}

func (fake *FakeScaler) ScaleArgsForCall(i int) (context.Context, io.Reader, int) {
	fake.scaleMutex.RLock()
	defer fake.scaleMutex.RUnlock()
	argsForCall := fake.scaleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeScaler) ScaleReturns(result1 []byte, result2 error) {
	fake.scaleMutex.Lock()
	defer fake.scaleMutex.Unlock()
	fake.ScaleStub = nil
	fake.scaleReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeScaler) ScaleReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.scaleMutex.Lock()
	defer fake.scaleMutex.Unlock()
	fake.ScaleStub = nil
	if fake.scaleReturnsOnCall == nil {
		fake.scaleReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.scaleReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeScaler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelMutex.RLock()
	defer fake.cancelMutex.RUnlock()
	fake.scaleMutex.RLock()
	defer fake.scaleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScaler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scaler.Scaler = new(FakeScaler)
